Pseudocode : Bellman-Ford

Input -> A weighted graph & a src node (with no negative cycles)
Output -> Shortest distance from src node to all other nodes


n -> number of nodes in graph
m -> number of edges in graph

time complexity -> O(n*m) ----- worst case -> O(n^3)
space complexity -> O(n)

/*

u---------v

d[u] + c(u,v) < d[v]
=> d[v] = d[u] + c(u,v)

*/


- create distance array "d" with all values to infinity -> O(n) // -> O(n)
- d[src] = 0 -> O(1)

- negative_cycle = false 

- for i = 1 to n-1: -> O(n) -> O(n*m)
   - for all edge e(u,v,w): -> O(m)
      - if d[u] + w < d[v]: -> O(1)
           d[v] = d[u] + w -> O(1)
           - if i == n:
             - negative_cycle = true


- print whether negative cycle exists 
- print the distance array "d" -> O(n)


/*

time: 
O(n) + O(1) + O(n*m) + O(n)
=> O(n*m)
=> O(|v| * |E|)

*/

