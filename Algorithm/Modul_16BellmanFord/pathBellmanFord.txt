Pseudocode : Bellman-Ford

Input -> A weighted graph & a src node (with no negative cycles) & a destination_node
Output -> Shortest distance from src node to all other nodes


n -> number of nodes in graph
m -> number of edges in graph

time complexity -> O(n*m) ----- worst case -> O(n^3)
space complexity -> O(n)

/*

u---------v

d[u] + c(u,v) < d[v]
=> d[v] = d[u] + c(u,v)

*/


- create distance array "d" with all values to infinity -> O(n) // -> O(n)
- create a parent array
- d[src] = 0 -> O(1)

- negative_cycle = false 
- last_updated_node = -1

- for i = 1 to n-1: -> O(n) -> O(n*m)
   - for all edge e(u,v,w): -> O(m)
      - if d[u] + w < d[v]: -> O(1)
           - d[v] = d[u] + w -> O(1)
           - parent[v] = u 
           - if i == n:
             - negative_cycle = true
             - last_updated_node = v




- if negative_cycle == false:
  - print the distance array "d" -> O(n)
  - selected_node = destination_node
  - declare a vector path
  - while true:
     - path.push_back(selected_node)
     - if selected_node == src:
     -  break
     - selected_node = parent[selected_node]
  - reverse the vector path
  - print the path

- else:
   - print negative cycle exists
   - selected_node = last_updated_node
   - for i = 1 to n - 1:
       - selected_node = parent[selected_node]
   - first_node = selected_node
   - declare a vector "cycle"
   - cycle.push_back(selected_node)
   - while true:
      - selected_node = parent[selected_node]
      - cycle.push_back(selected_node)
      - if selected_node == first_node:
          - break
   - reverse the "cycle" vector
   - print the cycle



/*

time: 
O(n) + O(1) + O(n*m) + O(n)
=> O(n*m)
=> O(|v| * |E|)

*/

